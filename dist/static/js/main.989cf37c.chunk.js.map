{"version":3,"sources":["logo.svg","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","__webpack_require__","p","openTab","require","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","amount","contactName","email","memo","open","paymentGatewayUrl","loading","result","handleChange","name","event","setState","defineProperty","target","value","handleClose","io","location","protocol","host","on","data","JSON","parse","_this2","classes","react_default","a","createElement","Fragment","className","index_es","onSubmit","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","wrap","_context","prev","next","preventDefault","axios","post","concat","sent","stop","_x","apply","arguments","id","label","onChange","margin","type","variant","main_default","src","theme","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","message","action","key","aria-label","color","close","onClick","Close_default","Component","HomePage","withStyles","padding","spacing","unit","ThanksForDonating","AppRouter","BrowserRouter","Route","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.989cf37c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/* eslint-disable no-restricted-globals */\nimport React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport {\n  TextField,\n  Button,\n  Snackbar,\n  IconButton,\n  Theme,\n  withStyles,\n  WithStyles,\n  LinearProgress\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport io from \"socket.io-client\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport ReactJson from \"react-json-view\";\nimport path from \"path\";\n\nconst openTab = require(\"open-new-tab\");\n\n/**\n * @param theme {Theme}\n */\nconst styles = theme => ({\n  close: {\n    padding: theme.spacing.unit / 2\n  }\n});\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    const socket = io(location.protocol + \"//\" + location.host);\n    socket.on(\"notifications\", data => {\n      this.setState({ loading: false, result: JSON.parse(data.data) });\n    });\n  }\n\n  state = {\n    amount: 100,\n    contactName: \"John\",\n    email: \"john@beta.inter.ac\",\n    memo: \"Money is good. :)\",\n    open: false,\n    paymentGatewayUrl: \"\",\n    loading: false,\n    result: {}\n  };\n\n  /**\n   * @param name {string}\n   */\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value\n    });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <React.Fragment>\n        <div className=\"App\">\n          {this.state.loading && <LinearProgress />}\n          <form\n            onSubmit={async e => {\n              e.preventDefault();\n              const baseURL =\n                process.env.NODE_ENV === \"production\" ? \"\" : \"/api\";\n              const result = await axios.post(`${baseURL}v1/request-money`, {\n                amount: this.state.amount,\n                contactName: this.state.contactName,\n                email: this.state.email,\n                memo: this.state.memo\n              });\n\n              const { paymentGatewayUrl } = result.data;\n\n              openTab(paymentGatewayUrl);\n\n              this.setState({ paymentGatewayUrl, open: true, loading: true });\n            }}\n          >\n            <TextField\n              id=\"standard-name\"\n              label=\"Name\"\n              value={this.state.amount}\n              onChange={this.handleChange(\"amount\")}\n              margin=\"normal\"\n            />\n            <TextField\n              id=\"standard-name\"\n              label=\"Name\"\n              value={this.state.contactName}\n              onChange={this.handleChange(\"contactName\")}\n              margin=\"normal\"\n            />\n            <TextField\n              id=\"standard-name\"\n              label=\"Name\"\n              value={this.state.email}\n              onChange={this.handleChange(\"email\")}\n              margin=\"normal\"\n            />\n            <TextField\n              id=\"standard-name\"\n              label=\"Name\"\n              value={this.state.memo}\n              onChange={this.handleChange(\"memo\")}\n              margin=\"normal\"\n            />\n            <div>\n              <Button type=\"submit\" variant=\"contained\">\n                Send Money Request\n              </Button>\n            </div>\n          </form>\n        </div>\n        <ReactJson src={this.state.result} theme=\"solarized\" />\n        <Snackbar\n          anchorOrigin={{\n            vertical: \"bottom\",\n            horizontal: \"left\"\n          }}\n          open={this.state.open}\n          autoHideDuration={6000}\n          onClose={this.handleClose}\n          message={<span id=\"message-id\">{this.state.paymentGatewayUrl}</span>}\n          action={[\n            <IconButton\n              key=\"close\"\n              aria-label=\"Close\"\n              color=\"inherit\"\n              className={classes.close}\n              onClick={this.handleClose}\n            >\n              <CloseIcon />\n            </IconButton>\n          ]}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nconst HomePage = withStyles(styles)(Home);\n\nconst ThanksForDonating = () => (\n  <h2>Thanks for donating to our charitable cause!</h2>\n);\n\nconst AppRouter = () => (\n  <Router>\n    <div>\n      <Route path=\"/\" exact component={HomePage} />\n      <Route path=\"/thanks/\" component={ThanksForDonating} />\n    </div>\n  </Router>\n);\n\nexport default AppRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Home from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Home />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}